/*
Formal Specification
---------------------------------
1 Task Formulation
Present an MDI (multi document interface) container screen with menu options
to support navigation the the various child screens and also present a read me
child screen at startup

2 Specification
Program launched
   Input: N/A, Output: Container/Menu screen presented along with ReadMe

Stock Item Find menu option clicked
   Input: Menu option selected, Output: Stock Item Find child screen 

Stock Item Add menu option clicked
   Input: Menu option selected, Output: Stock Item Edit child screen in add mode 

Inventory Location Find menu option clicked
   Input: Menu option selected, Output: Inventory Location Find child screen 

Inventory Location Add menu option clicked
   Input: Menu option selected, Output: Inventory Location Edit child screen in add mode

3 Problem Solving
Screen implemented using Java Swing Menu Bar and also Desktop Pane

4 Top Down Construction
When the application is started, present the Main form, also present by default
a read me child screen to explain how the applicaition works and can be tested

5 Bottom-Up Verification
Run the applicaiton, main screen is presented with menu options for the following:
 - Find and Add Stock Items
 - Find and Add Inventory Locations
 - Help options to create sample data and present read me
 Result = screen presented

6 Coding
Language is Java 

Variable Types
  Menu menubar
  container pane desktop pane

7 Testing
Launch the screen, this should present a menu with the following options: 
 - Find Stock Items
 - Add Stock Items
 - Find Inventory Locations
 - Add Inventory Location
 - Help 
   create sample Inventory Location data 
   create sample Stock Item data 
   Read me
 Result = screen presented as expected

Read me should be presented at start, result is screen presented as expected

Selecting any of the find/edit buttons results in the matching screen being
presented, result = selected screens presented

Selecting the create sample data results in sample data being created and
a confirmation received, result = sample data selection working as expected

Selecting a second Find/Add screen while one is already opens results in an 
error message stating that this is not allows, result = error message presented
as expected

 */
package exercise05.pkg7;

import javax.swing.JOptionPane;

/**
 * Multi Document Interface Container form for this application
 *
 * @author Mary Cronin 0510661,  Adrian O'Sullivan 16230124
 */
public class FrmMain extends javax.swing.JFrame {

    FrmInventoryLocationFind frmFindInventoryLocation;
    FrmInventoryLocationEdit frmInventoryLocationEdit;
    FrmStockItemEdit frmStockItemEdit;
    FrmStockItemFind frmFindStockItem;
    FrmReadMe frmReadMe;

    /**
     * Creates new form FrmMain
     */
    public FrmMain() {
        initComponents();
        PresentReadMe();
        this.setTitle("Simple Stock Management System (SSMS)");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem5 = new javax.swing.JMenuItem();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuStockItem = new javax.swing.JMenu();
        mnuStockItemFind = new javax.swing.JMenuItem();
        mnuStockItemAdd = new javax.swing.JMenuItem();
        mnuInventoryLocation = new javax.swing.JMenu();
        mnuInventoryLocationFind = new javax.swing.JMenuItem();
        mnuInventoryLocationAdd = new javax.swing.JMenuItem();
        mnuCreateInventorySampleData = new javax.swing.JMenu();
        mnuCreateSampleLocationData = new javax.swing.JMenuItem();
        mnuCreateSampleStockData = new javax.swing.JMenuItem();
        mnuReadMe = new javax.swing.JMenuItem();

        jMenuItem5.setText("jMenuItem5");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1024, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 747, Short.MAX_VALUE)
        );

        getContentPane().add(jDesktopPane1, java.awt.BorderLayout.CENTER);

        mnuStockItem.setText("Stock Item");

        mnuStockItemFind.setText("Find");
        mnuStockItemFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuStockItemFindActionPerformed(evt);
            }
        });
        mnuStockItem.add(mnuStockItemFind);

        mnuStockItemAdd.setText("Add");
        mnuStockItemAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuStockItemAddActionPerformed(evt);
            }
        });
        mnuStockItem.add(mnuStockItemAdd);

        jMenuBar1.add(mnuStockItem);

        mnuInventoryLocation.setText("Inventory Location");

        mnuInventoryLocationFind.setText("Find");
        mnuInventoryLocationFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuInventoryLocationFindActionPerformed(evt);
            }
        });
        mnuInventoryLocation.add(mnuInventoryLocationFind);

        mnuInventoryLocationAdd.setText("Add");
        mnuInventoryLocationAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuInventoryLocationAddActionPerformed(evt);
            }
        });
        mnuInventoryLocation.add(mnuInventoryLocationAdd);

        jMenuBar1.add(mnuInventoryLocation);

        mnuCreateInventorySampleData.setText("Help");
        mnuCreateInventorySampleData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCreateInventorySampleDataActionPerformed(evt);
            }
        });

        mnuCreateSampleLocationData.setText("Create Inventory Location Sample Data");
        mnuCreateSampleLocationData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCreateSampleLocationDataActionPerformed(evt);
            }
        });
        mnuCreateInventorySampleData.add(mnuCreateSampleLocationData);

        mnuCreateSampleStockData.setText("Creat Stock Item Sample Data");
        mnuCreateSampleStockData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCreateSampleStockDataActionPerformed(evt);
            }
        });
        mnuCreateInventorySampleData.add(mnuCreateSampleStockData);

        mnuReadMe.setText("Read me");
        mnuReadMe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuReadMeActionPerformed(evt);
            }
        });
        mnuCreateInventorySampleData.add(mnuReadMe);

        jMenuBar1.add(mnuCreateInventorySampleData);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Handle event Inventory Location Find menu option
     *
     * @param evt event action
     */
    private void mnuInventoryLocationFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuInventoryLocationFindActionPerformed
        CloseReadMe();
        // check and see if any other forms are open
        int frmCount = jDesktopPane1.getComponentCount();
        if (frmCount > 0) {
            JOptionPane.showMessageDialog(null, "This application supports only one active form, you must close all open forms first", "Problem", JOptionPane.ERROR_MESSAGE);
            return;
        }

        FindInventoryLocation();
    }//GEN-LAST:event_mnuInventoryLocationFindActionPerformed
    /**
     * Present the Find Inventory Location screen
     */
    public void FindInventoryLocation() {
        if (frmFindInventoryLocation == null || frmFindInventoryLocation.isClosed()) {
            frmFindInventoryLocation = new FrmInventoryLocationFind();
            jDesktopPane1.add(frmFindInventoryLocation);

        }
        frmFindInventoryLocation.setVisible(true);
        frmFindInventoryLocation.setClosable(true);
    }

    /**
     * Present the Find Stock Item screen
     */
    public void FindStockItem() {
        if (frmFindStockItem == null || frmFindStockItem.isClosed()) {
            frmFindStockItem = new FrmStockItemFind();
            jDesktopPane1.add(frmFindStockItem);

        }
        frmFindStockItem.setVisible(true);
        frmFindStockItem.setClosable(true);
    }

    /**
     * Handle event Inventory Location Add menu option
     *
     * @param evt event action
     */
    private void mnuInventoryLocationAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuInventoryLocationAddActionPerformed
        CloseReadMe();
        // check and see if any other forms are open
        int frmCount = jDesktopPane1.getComponentCount();
        if (frmCount > 0) {
            JOptionPane.showMessageDialog(null, "This application supports only one active form, you must close all open forms first", "Problem", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (frmInventoryLocationEdit == null || frmInventoryLocationEdit.isClosed()) {
            frmInventoryLocationEdit = new FrmInventoryLocationEdit(0);
            jDesktopPane1.add(frmInventoryLocationEdit);
        }
        frmInventoryLocationEdit.setVisible(true);
        frmInventoryLocationEdit.setClosable(true);
    }//GEN-LAST:event_mnuInventoryLocationAddActionPerformed

    private void mnuCreateInventorySampleDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCreateInventorySampleDataActionPerformed

    }//GEN-LAST:event_mnuCreateInventorySampleDataActionPerformed
    /**
     * Handle event Create Sample Location Data
     *
     * @param evt event action
     */
    private void mnuCreateSampleLocationDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCreateSampleLocationDataActionPerformed
        InventoryLocationCreateSampleData inventoryLocationTestData = new InventoryLocationCreateSampleData();
    }//GEN-LAST:event_mnuCreateSampleLocationDataActionPerformed
    /**
     * Handle event Add Stock Item
     *
     * @param evt event action
     */
    private void mnuStockItemAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuStockItemAddActionPerformed
        CloseReadMe();
        // check and see if any other forms are open
        int frmCount = jDesktopPane1.getComponentCount();
        if (frmCount > 0) {
            JOptionPane.showMessageDialog(null, "This application supports only one active form, you must close all open forms first", "Problem", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (frmStockItemEdit == null || frmStockItemEdit.isClosed()) {
            frmStockItemEdit = new FrmStockItemEdit(0);
            jDesktopPane1.add(frmStockItemEdit);
        }
        frmStockItemEdit.setVisible(true);
        frmStockItemEdit.setClosable(true);
    }//GEN-LAST:event_mnuStockItemAddActionPerformed
    /**
     * Handle event Add Stock Item
     *
     * @param evt event action
     */
    private void mnuStockItemFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuStockItemFindActionPerformed
        CloseReadMe();
        int frmCount = jDesktopPane1.getComponentCount();
        if (frmCount > 0) {
            JOptionPane.showMessageDialog(null, "This application supports only one active form, you must close all open forms first", "Problem", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (frmFindStockItem == null || frmFindStockItem.isClosed()) {
            frmFindStockItem = new FrmStockItemFind();
            jDesktopPane1.add(frmFindStockItem);
        }
        frmFindStockItem.setVisible(true);
        frmFindStockItem.setClosable(true);
    }//GEN-LAST:event_mnuStockItemFindActionPerformed

    /**
     * Handle event Create Sample Stock Data
     *
     * @param evt event action
     */
    private void mnuCreateSampleStockDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCreateSampleStockDataActionPerformed
        StockItemCreateSampleData stockItemTestData = new StockItemCreateSampleData();
    }//GEN-LAST:event_mnuCreateSampleStockDataActionPerformed
    /**
     * Present process request for read me form
     *
     * @param evt event action
     */
    private void mnuReadMeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuReadMeActionPerformed
        PresentReadMe();
    }

    /**
     * Present the read me form
     */
    private void PresentReadMe() {
        if (frmReadMe == null || frmReadMe.isClosed()) {
            frmReadMe = new FrmReadMe();
            jDesktopPane1.add(frmReadMe);
        }
        frmReadMe.setVisible(true);
        frmReadMe.setClosable(true);
    }

    /**
     * Close the readme form if it's open
     */
    private void CloseReadMe() {
        if (frmReadMe != null && frmReadMe.isClosed() == false) {
            frmReadMe.dispose();
        }
    }//GEN-LAST:event_mnuReadMeActionPerformed
    /**
     * Present the Edit Inventory Location edit form
     *
     * @param inventoryLocationId The id of the location to edit
     */
    void EditInventoryLocation(int inventoryLocationId) {
        // Close the Find form
        frmFindInventoryLocation.dispose();

        // Present the Edit form
        if (frmInventoryLocationEdit == null || frmInventoryLocationEdit.isClosed()) {
            frmInventoryLocationEdit = new FrmInventoryLocationEdit(inventoryLocationId);
            jDesktopPane1.add(frmInventoryLocationEdit);
        }
        frmInventoryLocationEdit.setVisible(true);
        frmInventoryLocationEdit.setClosable(true);

    }

    /**
     * Present the edit stock item screen
     *
     * @param stockItemId The id of the item to edit
     */
    void EditStockItem(int stockItemId) {
        // Close the Find form
        frmFindStockItem.dispose();

        // Present the Edit form
        if (frmStockItemEdit == null || frmStockItemEdit.isClosed()) {
            frmStockItemEdit = new FrmStockItemEdit(stockItemId);
            jDesktopPane1.add(frmStockItemEdit);
        }
        frmStockItemEdit.setVisible(true);
        frmStockItemEdit.setClosable(true);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenu mnuCreateInventorySampleData;
    private javax.swing.JMenuItem mnuCreateSampleLocationData;
    private javax.swing.JMenuItem mnuCreateSampleStockData;
    private javax.swing.JMenu mnuInventoryLocation;
    private javax.swing.JMenuItem mnuInventoryLocationAdd;
    private javax.swing.JMenuItem mnuInventoryLocationFind;
    private javax.swing.JMenuItem mnuReadMe;
    private javax.swing.JMenu mnuStockItem;
    private javax.swing.JMenuItem mnuStockItemAdd;
    private javax.swing.JMenuItem mnuStockItemFind;
    // End of variables declaration//GEN-END:variables
}
